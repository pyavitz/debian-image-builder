#!/bin/bash

filesystem(){
if [[ "$PETITBOOT" == "true" ]]; then EXTFS="ext2"; else EXTFS="ext4"; fi
if [[ "$VFAT" == "true" ]]; then BOOTFS="mkfs.vfat -n"; else BOOTFS="mkfs.${EXTFS} -L"; fi
if [[ "$EFI" == "true" ]]; then BOOT_LABEL="EFI"; else BOOT_LABEL="BOOT"; fi
if [[ "$P_VALUE" == "p2" ]]; then MAKE_BOOTFS="${BOOTFS} ${BOOT_LABEL} ${IMAGE_LOOP_DEV_BOOT}"; fi
if [[ "$FSTYPE" == "ext4" ]]; then
	MAKE_ROOTFS="mkfs.ext4 -L ROOTFS ${IMAGE_LOOP_DEV_ROOTFS}"
	MOUNT_ROOTFS="mount -o defaults,noatime ${IMAGE_LOOP_DEV_ROOTFS} ${P_ROOTFS}"
	ROOTFS_TABLE="ext4	defaults,noatime,commit=600,errors=remount-ro 0 1"
	ROOT_FSTYPE="rootfstype=ext4"
fi
if [[ "$FSTYPE" == "btrfs" ]]; then
	MAKE_ROOTFS="mkfs.btrfs -f -L ROOTFS ${IMAGE_LOOP_DEV_ROOTFS}"
	MOUNT_ROOTFS="mount -o compress=lzo,noatime,subvol=@ ${IMAGE_LOOP_DEV_ROOTFS} ${P_ROOTFS}"
	ROOTFS_TABLE="btrfs	defaults,compress=lzo,noatime,subvol=@ 0 1"
	ROOT_FSTYPE="rootfstype=btrfs rootflags=subvol=@"
fi
if [[ "$FSTYPE" == "xfs" ]]; then
	MAKE_ROOTFS="mkfs.xfs -f -L ROOTFS ${IMAGE_LOOP_DEV_ROOTFS}"
	MOUNT_ROOTFS="mount -o defaults,noatime ${IMAGE_LOOP_DEV_ROOTFS} ${P_ROOTFS}"
	ROOTFS_TABLE="xfs	defaults,noatime 0 1"
	ROOT_FSTYPE="rootfstype=xfs"
fi
}

single_partition(){
truncate -s ${IMGSIZE} "${IMAGE_FOLDER}${IMAGE_FILE_NAME}"
if [[ "$GPT" == "true" ]]; then
	if [[ "$FAMILY_EXT" == "rk356x" || "$FAMILY_EXT" == "rk3588" ]]; then
		sgdisk -og "${IMAGE_FOLDER}${IMAGE_FILE_NAME}"
		sgdisk -n 1:${OFFSET} "${IMAGE_FOLDER}${IMAGE_FILE_NAME}"
		sgdisk -evp "${IMAGE_FOLDER}${IMAGE_FILE_NAME}"
	else
		parted --script "${IMAGE_FOLDER}${IMAGE_FILE_NAME}" \
		mklabel gpt \
		mkpart 1 ext2 16MiB 100%
	fi
else
	echo -e "o
	n
	p
	1
	${OFFSET}
	a
	t
	b
	5999999

	p
	w" | fdisk "${IMAGE_FOLDER}${IMAGE_FILE_NAME}"
fi
IMAGE_LOOP_DEV="$(losetup --show -P -f ${IMAGE_FOLDER}${IMAGE_FILE_NAME})"
IMAGE_LOOP_DEV_ROOTFS="${IMAGE_LOOP_DEV}${P_ROOTFS}"
partprobe "${IMAGE_LOOP_DEV}"
mkdir -p ${P_ROOTFS}
filesystem
$MAKE_ROOTFS
mount "${IMAGE_LOOP_DEV_ROOTFS}" ${P_ROOTFS}
if [[ "$FSTYPE" == "btrfs" ]]; then
	btrfs subvolume create ${P_ROOTFS}/@
fi
flash_uboot
sync
umount ${P_ROOTFS}
$MOUNT_ROOTFS
}

dual_partition(){
truncate -s ${IMGSIZE} "${IMAGE_FOLDER}${IMAGE_FILE_NAME}";
if [[ "$VFAT" == "true" ]]; then
	if [[ "$GPT" == "true" ]]; then
		parted --script "${IMAGE_FOLDER}${IMAGE_FILE_NAME}" \
		mklabel gpt \
		mkpart 1 fat32 16MiB 256MiB \
		mkpart 2 ext2 256MiB 100%
		if [[ "$EFI" == "true" ]]; then
			parted --script "${IMAGE_FOLDER}${IMAGE_FILE_NAME}" set 1 esp on
		fi
	else
		echo -e "o
		n
		p
		1
		${OFFSET}
		526335
		a
		c
		t
		b
		n
		p
		2
		526336

		p
		w" | fdisk "${IMAGE_FOLDER}${IMAGE_FILE_NAME}";
		if [[ "$EFI" == "true" ]]; then
			if [[ "$FAMILY" == "broadcom" ]]; then
				:;
			else
				parted --script "${IMAGE_FOLDER}${IMAGE_FILE_NAME}" set 1 esp on
			fi
		fi
	fi
else
	echo -e "o
	n
	p
	1
	${OFFSET}
	526335
	n
	p
	2
	526336

	p
	w" | fdisk "${IMAGE_FOLDER}${IMAGE_FILE_NAME}";
fi
IMAGE_LOOP_DEV="$(losetup --show -P -f ${IMAGE_FOLDER}${IMAGE_FILE_NAME})"
IMAGE_LOOP_DEV_BOOT="${IMAGE_LOOP_DEV}${P_BOOT}"
IMAGE_LOOP_DEV_ROOTFS="${IMAGE_LOOP_DEV}${P_ROOTFS}"
partprobe "${IMAGE_LOOP_DEV}"
mkdir -p ${P_BOOT} ${P_ROOTFS}
filesystem
$MAKE_BOOTFS
$MAKE_ROOTFS
mount "${IMAGE_LOOP_DEV_BOOT}" ${P_BOOT}
mount "${IMAGE_LOOP_DEV_ROOTFS}" ${P_ROOTFS}
if [[ "$FSTYPE" == "btrfs" ]]; then
	btrfs subvolume create ${P_ROOTFS}/@
fi
if [[ "$PETITBOOT" == "true" || "$BOOTINI" == "true" ]] && [[ "$FAMILY_EXT" == "odroid" || "$BOARD" == "odroidc1" ]] ; then
	flash_vendor-uboot
else
	flash_uboot
fi
sync
umount ${P_ROOTFS}
$MOUNT_ROOTFS
}

partition(){
if [[ "$P_VALUE" == "p1" ]]; then
	P_ROOTFS="p1"
	single_partition
fi
if [[ "$P_VALUE" == "p2" ]]; then
	P_BOOT="p1"
	P_ROOTFS="p2"
	dual_partition
fi
}

uuid(){
if [[ "$P_VALUE" == "p1" ]]; then
	ROOT_UUID=$(blkid -o export -- "${IMAGE_LOOP_DEV_ROOTFS}" | sed -ne 's/^UUID=//p')
	ROOT_PARTUUID=$(blkid -o export -- "${IMAGE_LOOP_DEV_ROOTFS}" | sed -ne 's/^PARTUUID=//p')
	echo ROOT_UUID='"'$ROOT_UUID'"' > part-uuid.txt
	echo ROOT_PARTUUID='"'$ROOT_PARTUUID'"' >> part-uuid.txt
else
	BOOT_UUID=$(blkid -o export -- "${IMAGE_LOOP_DEV_BOOT}" | sed -ne 's/^UUID=//p')
	ROOT_UUID=$(blkid -o export -- "${IMAGE_LOOP_DEV_ROOTFS}" | sed -ne 's/^UUID=//p')
	ROOT_PARTUUID=$(blkid -o export -- "${IMAGE_LOOP_DEV_ROOTFS}" | sed -ne 's/^PARTUUID=//p')
	echo BOOT_UUID='"'$BOOT_UUID'"' > part-uuid.txt
	echo ROOT_UUID='"'$ROOT_UUID'"' >> part-uuid.txt
	echo ROOT_PARTUUID='"'$ROOT_PARTUUID'"' >> part-uuid.txt
fi
source part-uuid.txt
}

p1_fstab(){
tee p1/etc/fstab <<EOF
UUID=${ROOT_UUID}	/	${ROOTFS_TABLE}
tmpfs		/tmp	tmpfs	defaults,nosuid 0 0
EOF
}

p2_fstab(){
if [[ "$VFAT" == "true" ]] && [[ "$EFI" == "false" ]]; then
	BOOTFS_TABLE="/boot	vfat	defaults 0 2"
fi
if [[ "$VFAT" == "true" ]] && [[ "$EFI" == "true" ]]; then
	BOOTFS_TABLE="/boot/efi	vfat	defaults 0 2"
fi
if [[ "$VFAT" == "false" ]] && [[ "$EFI" == "false" ]]; then
	BOOTFS_TABLE="/boot	${EXTFS}	rw,relatime,errors=continue 0 2"
fi
tee p2/etc/fstab <<EOF
UUID=${BOOT_UUID}	${BOOTFS_TABLE}
UUID=${ROOT_UUID}	/	${ROOTFS_TABLE}
tmpfs	/tmp		tmpfs	defaults,nosuid 0 0
EOF
if [[ "$FAMILY" == "broadcom" ]] && [[ "$EFI" == "false" ]] && [[ "$VFAT" == "true" ]]; then
	sed -i 's/boot/boot\/broadcom/g' p2/etc/fstab
fi
if [[ "$FAMILY" == "broadcom" ]] && [[ "$EFI" == "true" ]] && [[ "$VFAT" == "true" ]]; then
	sed -i 's/boot\/efi/boot\/broadcom/g' p2/etc/fstab
fi
}

setup(){
if [ $VERBOSE -eq 1 ]; then
	partition;
else
	partition > /dev/null 2>&1;
fi
if [ $VERBOSE -eq 1 ]; then
	uuid;
else
	uuid > /dev/null 2>&1;
fi
if [[ -f "${DISTRO}-${DISTRO_VERSION}-${ROOTFS_ARCH}.tar.xz" ]]; then
	echo -en "${WHT}Extracting rootfs${FIN} ";
	tar -xf ${DISTRO}-${DISTRO_VERSION}-${ROOTFS_ARCH}.tar.xz -C ${P_VALUE}/;
	echo_bdone;
else
	echo -e "${YLW}Missing rootfs tarball${FIN}?";
	make cleanup > /dev/null 2>&1;
	exit;
fi
mkdir -p ${P_VALUE}/etc/apt/apt.conf.d ${P_VALUE}/etc/dpkg/dpkg.cfg.d
echo "force-unsafe-io" > "${P_VALUE}/etc/dpkg/dpkg.cfg.d/dpkg-unsafe-io"
mkdir -p ${P_VALUE}/usr/bin
cp $(command -v "${STATIC}") ${P_VALUE}/usr/bin
if [ $VERBOSE -eq 1 ]; then
	choose_release;
else
	choose_release > /dev/null 2>&1;
fi
if [ $VERBOSE -eq 1 ]; then
	${P_VALUE}_fstab;
else
	${P_VALUE}_fstab > /dev/null 2>&1;
fi
if [ -n "$PROXY" ]; then
	tee "${P_VALUE}/etc/apt/apt.conf.d/30proxy" <<EOF
Acquire::http::proxy "http://127.0.0.1:3142";
EOF
fi
}

board_information(){
BOARD_DEST="${P_VALUE}/etc/opt/board.txt"
echo "# architecture" > "${BOARD_DEST}"
echo ARCH='"'$ARCH'"' >> "${BOARD_DEST}"
echo ARCH_EXT='"'$ARCH_EXT'"' >> "${BOARD_DEST}"
echo CROSS_COMPILE='"'$CROSS_COMPILE'"' >> "${BOARD_DEST}"
echo "" >> "${BOARD_DEST}"
echo "# device information" >> "${BOARD_DEST}"
echo BOARD='"'$BOARD'"' >> "${BOARD_DEST}"
echo SERIES='"'$SERIES'"' >> "${BOARD_DEST}"
echo FAMILY='"'$FAMILY'"' >> "${BOARD_DEST}"
echo FAMILY_EXT='"'$FAMILY_EXT'"' >> "${BOARD_DEST}"
echo DTB='"'$DTB'"' >> "${BOARD_DEST}"
echo "" >> "${BOARD_DEST}"
echo "# partition scheme" >> "${BOARD_DEST}"
echo GPT='"'$GPT'"' >> "${BOARD_DEST}"
echo EFI='"'$EFI'"' >> "${BOARD_DEST}"
echo VFAT='"'$VFAT'"' >> "${BOARD_DEST}"
echo P_VALUE='"'$P_VALUE'"' >> "${BOARD_DEST}"
echo OFFSET='"'$OFFSET'"' >> "${BOARD_DEST}"
echo "" >> "${BOARD_DEST}"
echo "# filesystem" >> "${BOARD_DEST}"
echo FSTYPE='"'$FSTYPE'"' >> "${BOARD_DEST}"
echo "" >> "${BOARD_DEST}"
echo "# boot config" >> "${BOARD_DEST}"
echo EXTLINUX='"'$EXTLINUX'"' >> "${BOARD_DEST}"
echo PETITBOOT='"'$PETITBOOT'"' >> "${BOARD_DEST}"
echo BOOTINI='"'$BOOTINI'"' >> "${BOARD_DEST}"
echo "" >> "${BOARD_DEST}"
echo "# command line" >> "${BOARD_DEST}"
echo CONSOLE='"'$CONSOLE'"' >> "${BOARD_DEST}"
echo EXTRA='"'$EXTRA'"' >> "${BOARD_DEST}"
echo "" >> "${BOARD_DEST}"
echo "# motd" >> "${BOARD_DEST}"
echo DEFAULT_MOTD='"'$DEFAULT_MOTD'"' >> "${BOARD_DEST}"
}

files(){
cp lib/function/networking ${P_VALUE}/root/networking.txt
cp lib/function/services ${P_VALUE}/root/services.txt
cp lib/source ${P_VALUE}/root/source.txt
cp board.txt ${P_VALUE}/root
cp userdata.txt ${P_VALUE}/root
cp files/scripts/* ${P_VALUE}/root
cp files/users/* ${P_VALUE}/root
cp -f files/firmware/{fw-0a5c_21e8.hcd,UPDATE.mem} ${P_VALUE}/root
if [[ "$DISTRO" == "devuan" ]]; then
	cp files/inits/*.init ${P_VALUE}/root
fi
if [[ "$FAMILY" == "broadcom" ]]; then
	cp files/raspberrypi/* ${P_VALUE}/root
fi
board_information
}

# rename and check for compression
finish_image(){
IMAGE_TIME="$(date +%T | sed 's/://g' | sed 's/..$//')"
IMAGE_FIN_NAME="${DEVICE_SOC}-${DISTRO}-${DISTRO_VERSION}-${INSTALLED_KERNEL}-${ARCH_EXT}-${FSTYPE}-${IMAGE_DATE}-${IMAGE_TIME}.img"
if [[ -f "${IMAGE_FILE_NAME}" ]]; then mv -f ${IMAGE_FILE_NAME} ${IMAGE_FIN_NAME}; fi
if [ $COMPRESS_IMG -eq 1 ]; then
	echo_compress
	if [[ "$IMG_COMPRESSION" == "xz" ]]; then
		xz -zev --threads=${CORES} ${IMAGE_FIN_NAME}
	fi
	if [[ "$IMG_COMPRESSION" == "zst" ]]; then
		zstd -z --ultra --fast=10 -19 -T${CORES} --rm ${IMAGE_FIN_NAME}
	fi
	if [[ -f "${IMAGE_FIN_NAME}.${IMG_COMPRESSION}" ]]; then
		sha256sum ${IMAGE_FIN_NAME}.${IMG_COMPRESSION} > ${IMAGE_FIN_NAME}.${IMG_COMPRESSION}.sha256
		sha256sum --check ${IMAGE_FIN_NAME}.${IMG_COMPRESSION}.sha256
	fi
fi
}

# odroid boot.cmd
odroid_bootcmd(){
rm -f p1/{boot.cmd,config.ini}
VENDOR_KERNEL=`sed 's/INSTALLED_KERNEL="//g' kernel.txt | grep -o '^...'`
if [[ "$VENDOR_KERNEL" == "4.9" ]]; then
	cp files/boot/odroid/${FAMILY_EXT}-vendor-boot.cmd p1/boot.cmd;
	cp files/boot/odroid/${FAMILY_EXT}-vendor-config.ini p1/config.ini;
else
	cp files/boot/odroid/${FAMILY_EXT}-boot.cmd p1/boot.cmd;
	cp files/boot/odroid/${FAMILY_EXT}-config.ini p1/config.ini;
fi
if [[ -f "files/boot/odroid/odroid-boot-logo.bmp.gz" ]]; then
	cp files/boot/odroid/odroid-boot-logo.bmp.gz p1/boot-logo.bmp.gz;
fi
if [[ -f "p1/config.ini" ]]; then
	sed -i "s/uuid=PARTUUID=/uuid=PARTUUID=${ROOT_PARTUUID}/g" p1/config.ini;
	if [[ "$FSTYPE" == "ext4" || "$FSTYPE" == "xfs" ]]; then
		sed -i "s/rootfstype=/rootfstype=${ROOT_FSTYPE}/g" p1/config.ini;
	fi
	if [[ "$FSTYPE" == "btrfs" ]]; then
		sed -i 's/rootfstype=/rootfstype="'"${ROOT_FSTYPE}"'"/g' p1/config.ini;
	fi
	sed -i "s/fdtfile=/fdtfile=${DTB}.dtb/g" p1/config.ini;
	mkimage -C none -A arm -T script -d p1/boot.cmd p1/boot.scr;
fi
}

odroid_bootini(){
rm -f p1/boot.ini
cp -f files/boot/odroid/${BOARD}-boot.ini p1/boot.ini
sed -i "s/root=PARTUUID=/root=PARTUUID=${ROOT_PARTUUID}/g" p1/boot.ini
sed -i "s/rootfstype=/${ROOT_FSTYPE}/g" p1/boot.ini
tee --append p1/boot.ini <<EOF
fatload mmc 0:1 0x20800000 uImage
fatload mmc 0:1 0x22000000 uInitrd
fatload mmc 0:1 0x21800000 amlogic/meson8b-odroidc1.dtb
fdt addr 21800000

bootm 0x20800000 0x22000000 0x21800000
EOF
}

bootcmd(){
echo -en "$BOARD: "; echo -e "boot script"
if [[ "$P_VALUE" == "p1" ]]; then
	BOOT_PATH="p1/boot"
else
	BOOT_PATH="p1"
fi
rm -f ${BOOT_PATH}/{boot.cmd,boot.scr}
cp -f files/boot/boot.cmd ${BOOT_PATH}/
sed -i 's/^setenv bootlabel "".*/setenv bootlabel "'"${DEFAULT_MOTD}"'"/g' ${BOOT_PATH}/boot.cmd
sed -i 's/^setenv uuid "".*/setenv uuid "'"PARTUUID=${ROOT_PARTUUID}"'"/g' ${BOOT_PATH}/boot.cmd
sed -i 's/^setenv rootfstype "".*/setenv rootfstype "'"${ROOT_FSTYPE}"'"/g' ${BOOT_PATH}/boot.cmd
sed -i 's/^setenv console "".*/setenv console "'"${CONSOLE}"'"/g' ${BOOT_PATH}/boot.cmd
sed -i 's/^setenv extra "".*/setenv extra "'"${EXTRA}"'"/g' ${BOOT_PATH}/boot.cmd
if [[ "$P_VALUE" == "p1" ]]; then
	sed -i 's/^setenv fk_kvers "".*/setenv fk_kvers "'"boot\/Image"'"/g' ${BOOT_PATH}/boot.cmd
	sed -i 's/^setenv initrd "".*/setenv fk_kvers "'"boot\/uInitrd"'"/g' ${BOOT_PATH}/boot.cmd
	sed -i 's/^setenv fdtdir "".*/setenv fk_kvers "'"boot\/${FAMILY}"'"/g' ${BOOT_PATH}/boot.cmd
	sed -i 's/^setenv load "".*/setenv load "'"ext4load"'"/g' ${BOOT_PATH}/boot.cmd
fi
if [[ "$P_VALUE" == "p2" ]]; then
	sed -i 's/^setenv fk_kvers "".*/setenv fk_kvers "'"Image"'"/g' ${BOOT_PATH}/boot.cmd
	sed -i 's/^setenv initrd "".*/setenv initrd "'"uInitrd"'"/g' ${BOOT_PATH}/boot.cmd
	sed -i 's/^setenv fdtdir "".*/setenv fdtdir "'"${FAMILY}"'"/g' ${BOOT_PATH}/boot.cmd
	if [[ "$VFAT" == "true" ]]; then
		sed -i 's/^setenv load "".*/setenv load "'"fatload"'"/g' ${BOOT_PATH}/boot.cmd
	fi
	if [[ "$FSTYPE" == "btrfs" || "$FSTYPE" == "xfs" ]] && [[ "$VFAT" == "false" ]]; then
		sed -i 's/^setenv load "".*/setenv load "'"ext2load"'"/g' ${BOOT_PATH}/boot.cmd
	fi
fi
sed -i 's/^setenv fdtfile "".*/setenv fdtfile "'"${DEVICETREE}"'"/g' ${BOOT_PATH}/boot.cmd
mkimage -C none -A arm -T script -d ${BOOT_PATH}/boot.cmd ${BOOT_PATH}/boot.scr
}

extlinux(){
echo -en "$BOARD: "; echo -e "extlinux.conf"
if [[ "$P_VALUE" == "p1" ]]; then
	BOOT_PATH="p1/boot"
else
	BOOT_PATH="p1"
fi
FDT="../${FAMILY}/${DTB}.dtb"
FDTDIR="../${FAMILY}/"
CMDLINE="append earlyprintk ${CONSOLE} rw root=PARTUUID=${ROOT_PARTUUID} rootwait ${ROOT_FSTYPE} fsck.repair=yes loglevel=1 ${EXTRA} init=/sbin/init"
CHECK=`echo "$INSTALLED_KERNEL" | sed -e 's/^\(.\{4\}\).*/\1/' | sed 's/-//g'`
mkdir -p ${BOOT_PATH}/extlinux
if [[ -f "${BOOT_PATH}/extlinux/extlinux.conf" ]]; then rm -f ${BOOT_PATH}/extlinux/extlinux.conf; fi
tee ${BOOT_PATH}/extlinux/extlinux.conf <<EOF
label default
	kernel ../Image
	initrd ../uInitrd
	fdtdir ${FDTDIR}
	fdt ${FDT}
	#fdtoverlays
	${CMDLINE}
EOF
}

customize_image(){
# edit board.txt variables before the file gets sourced
if [[ `grep -w 'FAMILY_EXT="odroid"' "board.txt"` ]]; then
	if [[ "$ENABLE_PETITBOOT" == "true" ]]; then
		sed -i 's/P_VALUE="p1"/P_VALUE="p2"/g' board.txt
		sed -i 's/EXTLINUX="true"/EXTLINUX="false"/g' board.txt
		sed -i 's/PETITBOOT="false"/PETITBOOT="true"/g' board.txt
	fi
fi
if [[ -f "custom.txt" ]] && [[ "$FSTYPE" == "btrfs" || "$FSTYPE" == "xfs" ]]; then
	if [[ `grep -w 'P_VALUE="p1"' "board.txt"` ]]; then
		# u-boot doesn't support booting directly from this fstype so force a boot partition
		sed -i 's/P_VALUE="p1"/P_VALUE="p2"/g' board.txt
	fi
fi
if [[ -f "custom.txt" ]] && [[ "$ENABLE_EFI" == "true" ]]; then
	sed -i 's/EFI="false"/EFI="true"/g' board.txt
	if [[ `grep -w 'FAMILY="rockchip"' "board.txt"` ]] && [[ `grep -w 'GPT="false"' "board.txt"` ]]; then
		sed -i 's/GPT="false"/GPT="true"/g' board.txt
	fi
	if [[ `grep -w 'VFAT="false"' "board.txt"` ]]; then
		sed -i 's/VFAT="false"/VFAT="true"/g' board.txt
	fi
	if [[ `grep -w 'P_VALUE="p1"' "board.txt"` ]]; then
		sed -i 's/P_VALUE="p1"/P_VALUE="p2"/g' board.txt
	fi
fi
if [[ -f "custom.txt" ]] && [[ "$ENABLE_VFAT" == "true" ]]; then
	if [[ `grep -w 'VFAT="false"' "board.txt"` ]]; then
		sed -i 's/VFAT="false"/VFAT="true"/g' board.txt
	fi
	if [[ `grep -w 'P_VALUE="p1"' "board.txt"` ]]; then
		sed -i 's/P_VALUE="p1"/P_VALUE="p2"/g' board.txt
	fi
fi
}
